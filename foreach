SCRIPT_PATH=$(which $0)
SCRIPT_DIR=$(dirname $SCRIPT_PATH)
SCRIPT_NAME=${SCRIPT_PATH##*/}

pushd $SCRIPT_DIR > /dev/null
VERSION=$(git describe --abbrev=0 --tags 2> /dev/null)
VERSION=${VERSION:-0.1.0}
popd > /dev/null

WORKSPACE_URL=${WORKSPACE_URL:-'git@git.sbis.ru:mobileworkspace'}

declare -A ANSI_COLOR_MAP=( \
[Black]='30' [Grey]='1;30' [Gray]='1;30' \
[Red]='31' [LRed]='1;31' \
[Green]='32' [LGreen]='1;32' \
[Orange]='33' [Brown]='33' [Yellow]='1;33' \
[Blue]='34' [LBlue]='1;34' \
[Purple]='35' [LPurple]='1;35' \
[Cyan]='36' [LCyan]='1;36' \
[LGrey]='37' [LGray]='37' [White]='1;37' [Clear]='')

function prtcl() {
    key=${1:-Clear}
    color=${ANSI_COLOR_MAP[$key]}
    echo -e "\e[${color}m"
}

hlstderr()(set -o pipefail;"$@" 2>&1>&3|sed $'s,.*,\e[31m&\e[m,'>&2)3>&1

function usage() {
  echo "$SCRIPT_NAME [options] command < modules.list

options:
-h, --help                 show brief help
-d, --work-dir=WORKDIR     specify a directory with modules
-b, --branch=BRANCH        specify an branch to switch
-v, --version              show version
-s, --separator=SEPARATOR  specify separator format, default: 'with $MODULE:'

available vaiables:
BRANCH
WORKDIR
MODULE
MODULE_REPO_URL
MODULE_ORIGIN_URL
CURRENT_BRANCH
"
}

SEPARATOR='$(prtcl White)with $(prtcl LCyan)$MODULE$(prtcl):'

while [[ $# -gt 0 ]]
do
  case "$1" in
    -h|--help)
      usage
      exit 0
      ;;

    -b)
      shift
      if [[ $# -gt 0 ]]; then
          export BRANCH=$1
      else
          echo "$(prtcl LRed)[ERROR] no branch specified.$(prtcl)" >&2
          exit 1
      fi
      shift
      ;;

    --branch*)
      export BRANCH=${1#*=}
      shift
      ;;

    -d)
      shift
      if [[ $# -gt 0 ]]; then
          export WORKDIR=$1
      else
          echo "$(prtcl LRed)[ERROR] no workdir specified.$(prtcl)" >&2
          exit 2
      fi
      shift
      ;;

    --work-dir*)
      export WORKDIR=${1#*=}
      shift
      ;;

    -s)
      shift
      if [[ $# -gt 0 ]]; then
          export SEPARATOR=$1
      else
          echo "$(prtcl LRed)[ERROR] no separator specified.$(prtcl)" >&2
          exit 2
      fi
      shift
      ;;

    --separator*)
      export SEPARATOR=${1#*=}
      shift
      ;;


    -v|--version)
      shift
      echo $VERSION   
      exit 0
      ;;

    *) 
      break;
      ;;
  esac
done

if [ -n "$WORKDIR" ]; then
    WORKDIR=$(eval echo $WORKDIR)
    echo "WORKDIR: '$WORKDIR'"
else
    WORKDIR_IS_CURRENT=1
    echo "WORKDIR: $PWD"
fi

if [ -n "$BRANCH" ]; then
    BRANCH=$(eval echo $BRANCH)
    echo "BRANCH : '$BRANCH'"
fi

if [[ ! -d "$WORKDIR" && ! -n $WORKDIR_IS_CURRENT ]]; then
    echo "$(prtcl LRed)[ERROR]$(prtcl) workdir '$(prtcl LBlue)$WORKDIR$(prtcl)' not found." >&2
    exit 3
fi

if [ -z $WORKDIR_IS_CURRENT ]; then
    pushd $WORKDIR > /dev/null
    WORKDIR_PUSHD_EXTCODE=$?
fi

while read MODULE
do
    eval echo $SEPARATOR

    MODULE_REPO_URL=$WORKSPACE_URL/${MODULE}.git
 
    if [ ! -d "$MODULE" ]; then
        ARG_BRANCH="-b ${BRANCH:-development}"
        eval git clone --single-branch $ARG_BRANCH $MODULE_REPO_URL || continue
    fi
 
    pushd $MODULE > /dev/null || continue
    MODULE_ORIGIN_URL=$(git remote get-url origin)
    if [ "$MODULE_ORIGIN_URL" != "$MODULE_REPO_URL" ]; then
        echo "$(prtcl Yellow)[WARNING] $(prtcl White)origin$(prtcl)($(prtcl Blue)$MODULE_ORIGIN_URL$(prtcl)) != $(prtcl Blue)$MODULE_REPO_URL$(prtcl)"
    fi
    
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

    if [[ -n "$BRANCH" && "$BRANCH" != "$CURRENT_BRANCH" ]]; then
        if [[ -n $(git ls-remote --heads origin $BRANCH) || -n $(git branch --list $BRANCH) ]]; then
            hlstderr git checkout $BRANCH
        else
            echo "$(prtcl LRed)[ERROR] $(prtcl)Remote branch $(prtcl Yellow)$BRANCH$(prtcl) not found in upstream $(prtcl Blue)$MODULE_REPO_URL$(prtcl)"
            popd > /dev/null
            continue
        fi
    fi

    if [[ $# -gt 0 ]]; then
        shopt -s extglob
        hlstderr eval $@
        shopt -u extglob
    else
        echo --
    fi

    popd > /dev/null

done

[[ -z $WORKDIR_IS_CURRENT && $WORKDIR_PUSHD_EXTCODE -eq 0 ]] && popd > /dev/null

exit 0
